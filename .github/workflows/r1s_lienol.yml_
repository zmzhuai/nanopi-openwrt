name: r1s Lienol版openwrt

on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/r1s_lienol.yml'
  schedule:
    - cron: 0 0 */10 * *

jobs:

  build:

    runs-on: ubuntu-latest
    if: github.repository == 'klever1988/nanopi-openwrt'

    steps:

      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d
          sudo apt-get update
          sudo apt-get -y --no-install-recommends install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
          curl https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh  | sed '/#/d' | sed 's/\\//g' | sed 's/exit 0//g' | sed 's/sudo apt -y install//g' | sed 's/sudo apt-get -y install//g' | sed 's/:i386//g' | xargs sudo apt-get -y --no-install-recommends install
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk

      - name: Install Repo
        run: |
          git clone https://github.com/friendlyarm/repo
          sudo cp repo/repo /usr/bin/

      - name: Init Source
        run: |
          mkdir friendlywrt-h5
          cd friendlywrt-h5
          repo init -u https://github.com/friendlyarm/friendlywrt_manifests -b master-v19.07.1 -m h5.xml --repo-url=https://github.com/friendlyarm/repo --no-clone-bundle --depth=1
          repo sync -c --no-tags --no-clone-bundle -j8
          cd friendlywrt/ && git fetch --unshallow

      - name: Mods
        run: |
          cd friendlywrt-h5
          . ../remove_unused_config.sh
          cat ../app_config.seed >> configs/config_h5
          echo '# CONFIG_V2RAY_COMPRESS_UPX is not set' >> configs/config_h5
          cd friendlywrt
          git config --local user.email "action@github.com" && git config --local user.name "GitHub Action"
          git remote add upstream https://github.com/Lienol/openwrt && git fetch upstream
          git checkout upstream/dev-19.07 -b tmp
          git mv README.md README && git commit -m 'undo rename readme for rebasing'
          git checkout origin/master-v19.07.1
          git rebase adc1a9a3676b8d7be1b48b5aed185a94d8e42728^ --onto tmp -X theirs
          rm target/linux/allwinner-h5/patches-4.14/0001-net-thunderx-workaround-BGX-TX-Underflow-issue.patch
          sed -i '/ipv6/,+3d' package/base-files/files/root/setup.sh
          git checkout upstream/dev-19.07 -- feeds.conf.default
          #git apply ../../enable_autocore.diff
          sed -i '/ucl upx/d' tools/Makefile
          sudo apt -y install upx-ucl && mkdir -p staging_dir/host/bin && ln -s /usr/bin/upx-ucl staging_dir/host/bin/upx
          sed -i '/exit/i\chown -R root:root /usr/share/netdata/web' package/default-settings/files/zzz-default-settings
          sed -i 's/option fullcone\t1/option fullcone\t0/' package/network/config/firewall/files/firewall.config
          sed -i '/8.8.8.8/d' package/base-files/files/root/setup.sh
          echo -e '\nDYC Build\n'  >> package/base-files/files/etc/banner

      - name: Mod luci
        run: |
          cd friendlywrt-h5/friendlywrt
          ./scripts/feeds update -a && ./scripts/feeds install -a
          sed -i '/Load Average/i\<div class="tr"><div class="td left" width="33%"><%:CPU Temperature%></div><div class="td left" id="_cputemp"><%=luci.sys.exec("cut -c1-2 /sys/class/thermal/thermal_zone0/temp")%></div></div>' feeds/luci/modules/luci-mod-admin-full/luasrc/view/admin_status/index.htm
          sed -i 's/pcdata(boardinfo.system or "?")/"ARMv8"/' feeds/luci/modules/luci-mod-admin-full/luasrc/view/admin_status/index.htm

      - name: Build FriendlyWrt
        run: |
          cd friendlywrt-h5
          cp configs/config_h5 friendlywrt/.config
          cd friendlywrt
          make defconfig && make download -j8
          make -s -j$(nproc) || make V=s -j1

      #- name: Patch Kernel
      #  run: |
      #    cd friendlywrt-h5
      #    #cd kernel/ && git apply ../../add_fullconenat.diff && cd ../
      #    git clone https://github.com/openwrt/openwrt
      #    cd openwrt/
      #    git checkout 5387bc9cbb9ed205f08766523a296f21dfa83b56
      #    rm target/linux/generic/backport-4.14/400-v4.16-leds-trigger-Introduce-a-NETDEV-trigger.patch
      #    rm target/linux/generic/pending-4.14/403-mtd-hook-mtdsplit-to-Kbuild.patch
      #    rm target/linux/generic/hack-4.14/700-swconfig_switch_drivers.patch
      #    ./scripts/patch-kernel.sh ../kernel target/linux/generic/backport-4.14
      #    ./scripts/patch-kernel.sh ../kernel target/linux/generic/pending-4.14
      #    ./scripts/patch-kernel.sh ../kernel target/linux/generic/hack-4.14
      #    cd ../kernel && git checkout -- drivers/mtd/ && cd ../
      #    find friendlywrt/ -type f -name .config.override -exec cp {} ../ \;
      #    grep -i 'FILTER_\|FLOW' ../.config.override > .config.override
      #    wget https://github.com/torvalds/linux/raw/master/scripts/kconfig/merge_config.sh && chmod +x merge_config.sh
      #    ./merge_config.sh -m .config.override kernel/arch/arm64/configs/sunxi_arm64_defconfig && mv .config kernel/arch/arm64/configs/sunxi_arm64_defconfig
          
      - name: Build SD img
        run: |
          cd friendlywrt-h5
          sed -i '130,150 {/build_friendlywrt/d}' scripts/build.sh
          ./build.sh nanopi_r1s.mk

      - name: Zip Files
        run: |
          gzip friendlywrt-h5/out/*.img
      - name: Assemble Artifact
        id: assemble_artifact
        run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          mv friendlywrt-h5/out/*img* ./artifact/
          cp friendlywrt-h5/friendlywrt/.config ./artifact/
          cd ./artifact/
          md5sum *img* > md5sum.txt
          cd ..
          zip -r artifact.zip ./artifact/
          release_tag="R1S-Lienol-$(date +%Y-%m-%d)"
          echo "##[set-output name=release_tag;]$release_tag"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.sec_token }}
        with:
          tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
          release_name: 自动发布 ${{ steps.assemble_artifact.outputs.release_tag }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.sec_token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./artifact.zip
          asset_name: ${{ steps.assemble_artifact.outputs.release_tag }}-ROM.zip
          asset_content_type: application/zip
